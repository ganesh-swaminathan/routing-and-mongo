var chai = require('chai');
var expect = chai.expect;
var chaiHttp = require('chai-http');
var constants= require('../constants');

var responseEntity = require('../utility/ResponseEntity.js');

chai.use(chaiHttp);

function iThrowError() {
   throw new Error("Please Send code or error message");
}

/*
**Test cases for null code and error object
*/
describe('Check for null code and error object', function () {
    it('Should throw an error', function (done) {
        try{
        responseEntity.createResponse("PS", null, null, null, function (result) {
            JSON.stringify(result);            
        })}
        catch(err){
            expect(err).to.eql(new Error('Please Send code or error message'));
        }
        done();
    });
});

/*
** Test cases for invalid json object
*/
describe('Check for invalid Json Object response object', function () {
    it('Should return a invalid json error', function (done) {
        var data = '{"id":1....}';
        responseEntity.createResponse("US", constants.CREATED, data, null, function (result) {
            JSON.stringify(result);                                    
            expect(result.code).to.be.a('string').eq('US-7001');
            done();
        })
    });
});
 
/*
** Test cases for Sequelize error
*/
describe('Check for Seqelize error', function () {
    it('Should return a Sequelize database error ', function (done) {
        var error = {
            "name": "SequelizeDatabaseError",
            "message": "database error"
        }

        responseEntity.createResponse("US", null, null, error, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('US-1001');
            done();
        })
    });

    it('Should return a Sequelize validation error ', function (done) {
        var error = {
            "name": "SequelizeValidationError",
            "message": "Invalid input paramters"
        }

        responseEntity.createResponse("US", null, null, error, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('US-1002');
            done();
        })
    });

    it('Should return a generic database error', function (done) {

        var error = {
            "name": "SequelizeError",
            "message": "connection close"
        }

        responseEntity.createResponse("US", null, null, error, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('US-3002');
            done();
        })
    });
});

/*
** Test cases for cassandra database errors
*/
describe('Check for cassandra error', function () {
    it('Should return a cassandra validation error', function (done) {
        var error = {
            "name": "apollo.model.validator.invalidvalue",
            "message": "validation error"
        }

        responseEntity.createResponse("PS", null, null, error, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('PS-2002');
            done();
        })
    });

    it('Should return a generlize database error', function (done) {
        var error = {
            "name": "CassandraError",
            "message": "connection close"
        }

        responseEntity.createResponse("PS", null, null, error, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('PS-3002');
            done();
        })
    });
});

/*
** Test cases for duplicate data errors
*/
describe('Check for duplcate data error', function () {
    it('Should return an error', function (done) {
        responseEntity.createResponse("PS", constants.USER_DUPLICATION_ERROR, null, null, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('PS-5001');
            done();
        })
    });
});

/*
** Test cases for success response
*/
describe('Check for success response object', function () {
    it('Should return a successfully created response ', function (done) {
        var data = {
            "id": 13
        }
        responseEntity.createResponse("US", constants.CREATED, data, null, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('US-201');
            done();
        })
    });

    it('Should return a success response ', function (done) {
        var data = {'id': '13','name': 'shiwani','mobNo': '9876543212'};
        responseEntity.createResponse("US", constants.SUCCESS, data, null, function (result) {
            JSON.stringify(result);
            expect(result.code).to.be.a('string').eq('US-200');
            done();
        })
    });

     it('Should return a success response with data and count ', function (done) {
        var data = {"rows":{'id': '13','name': 'shiwani','mobNo': '9876543212'},"count":3};
        responseEntity.createResponse("US", constants.SUCCESS, data, null, function (result) {
            JSON.stringify(result);
            console.log(JSON.stringify(result));
            expect(result.code).to.be.a('string').eq('US-200');
            done();
        })
    });
});